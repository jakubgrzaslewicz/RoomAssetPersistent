tasks.withType(Javadoc) {
    excludes = ['**/*.kt']
}
ext {
    bintrayApiKey = 'XXX'

    bintrayRepo = 'android'
    bintrayName = 'roomassetpersistent'

    publishedGroupId = 'pl.jakubgrzaslewicz.android'
    libraryName = 'roomassetpersistent'
    artifact = 'roomassetpersistent'

    libraryDescription = 'A library for using the Android Room Persistence Library with the persistent database file included in the assets'

    siteUrl = 'https://github.com/jakubgrzaslewicz/roomassetpersistent'
    gitUrl = 'https://github.com/jakubgrzaslewicz/roomassetpersistent.git'

    libraryVersion = '0.0.6'

    developerId = 'jakubgrzaslewicz'
    developerName = 'Jakub Grząślewicz'
    developerEmail = 'jake@jakubgrzaslewicz.pl'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

group = publishedGroupId
version = libraryVersion

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId publishedGroupId
            artifactId artifact

            name libraryName
            description libraryDescription
            url siteUrl

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

bintray {
    user = developerId
    key = bintrayApiKey

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        dryRun = false
        publish = true
        override = false
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
}
task publishToBintray {
    dependsOn 'clean'
    dependsOn 'install'
    dependsOn 'bintrayUpload'
    tasks.findByName('install').mustRunAfter 'clean'
    tasks.findByName('bintrayUpload').mustRunAfter 'install'
}